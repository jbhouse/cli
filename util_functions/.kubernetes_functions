#!/bin/bash

function allLogsFor() {
  pane=0
  window=0
  for pod in $(cube-all-pods $1); do
    if [ $pane == 0 ]; then tmux new-session -d -s $1;
      else
        n=$(($pane%5))
        if [ $n == 0 ];
          then
            ((window++));
            pane=0;
            tmux new-window -t $1:$window;
          else
            tmux split-window -h;
        fi
    fi
    tmux send-keys -t $1:$window.$pane "kubectl -n $KNS --kubeconfig=$KUBECONFIG logs -f $pod" C-m;
    ((pane++))
  done
  tmux select-layout -t $1:0 tiled
  tmux attach -t $1
}

function hlm() { cube-configure; helm -n $KNS --kubeconfig=$KUBECONFIG $* ;}

function cube-describe() {
  cube describe po $(cube get po | fzf | awk '{ print $1 }')
}

function cube-delete() {
    if [ ! -z "$1" ]
        then cube delete po $1;
        else cube delete po $(cube-get-pod);
    fi
}

function cube-logs() { cube logs $* $(cube-get-pod); }

function cube-configure() { if [ -z $KNS ] || [ -z $KUBECONFIG ]; then senv ; fi ; }

function cube() {
  cube-configure;
  kubectl -n $KNS --kubeconfig=$KUBECONFIG $*;
}

function cube-scale() {
    DEPLOY_NAME=$(cube get deployments | fzf | awk '{ print $1 }')
    echo "Scaling deployment ${DEPLOY_NAME}"
    echo "How many replicas would you like to scale to?"
    read replicacount
    cube scale --replicas=$replicacount deployment/$DEPLOY_NAME
}

function cube-exec() { cube exec $(cube-get-pod) -- $* ;}

function cube-terminal() {
    if [ ! -z "$1" ]
        then cube exec "$1" -it -- /bin/sh
        else cube exec $(cube-get-pod) -it -- /bin/sh
    fi
}

function cube-all-pods() {
    if [ ! -z "$1" ]
        then cube get po | awk '{ print $1 }' | grep $1
        else cube get po | awk '{ print $1 }'
    fi
}

function cube-get-pod() { cube get po | awk '{ print $1 }' | fzf ;}

function senv() {
    ENV_NAME=$(ls ~/.kube | fzf)
#    rm ~/.kube/config; ln -s ~/.kube/$ENV_NAME ~/.kube/config
    KUBECONFIG=~/.kube/$ENV_NAME
    KNS=$(kubectl --kubeconfig=$KUBECONFIG get namespaces | awk '{print $1}' | fzf)
#    KNS=$(kubectl get namespaces | awk '{print $1}' | fzf)
}

function cube-control() {
  tmux new-session -d -s "cube-control";
  tmux rename-window "pods";
  tmux send-keys -t "cube-control":"pods" "KNS=$KNS;KUBECONFIG=$KUBECONFIG" C-m;
  tmux send-keys -t "cube-control":"pods" "pods" C-m;

  tmux new-window -t "cube-control":1;
  tmux rename-window "services";
  tmux send-keys -t "cube-control":"services" "KNS=$KNS;KUBECONFIG=$KUBECONFIG" C-m;
  tmux send-keys -t "cube-control":"services" "services" C-m;

  tmux new-window -t "cube-control":2;
  tmux rename-window "deployments";
  tmux send-keys -t "cube-control":"deployments" "KNS=$KNS;KUBECONFIG=$KUBECONFIG" C-m;
  tmux send-keys -t "cube-control":"deployments" "deployments" C-m;

  tmux new-window -t "cube-control":3;
  tmux rename-window "statefulsets";
  tmux send-keys -t "cube-control":"statefulsets" "KNS=$KNS;KUBECONFIG=$KUBECONFIG" C-m;
  tmux send-keys -t "cube-control":"statefulsets" "statefulsets" C-m;

  tmux new-window -t "cube-control":4;
  tmux rename-window "replicasets";
  tmux send-keys -t "cube-control":"replicasets" "KNS=$KNS;KUBECONFIG=$KUBECONFIG" C-m;
  tmux send-keys -t "cube-control":"replicasets" "replicasets" C-m;

  tmux new-window -t "cube-control":5;
  tmux rename-window "configmaps";
  tmux send-keys -t "cube-control":"configmaps" "KNS=$KNS;KUBECONFIG=$KUBECONFIG" C-m;
  tmux send-keys -t "cube-control":"configmaps" "configmaps" C-m;

  tmux new-window -t "cube-control":6;
  tmux rename-window "secrets";
  tmux send-keys -t "cube-control":"secrets" "KNS=$KNS;KUBECONFIG=$KUBECONFIG" C-m;
  tmux send-keys -t "cube-control":"secrets" "secrets" C-m;

  tmux new-window -t "cube-control":7;
  tmux rename-window "ingress";
  tmux send-keys -t "cube-control":"ingress" "KNS=$KNS;KUBECONFIG=$KUBECONFIG" C-m;
  tmux send-keys -t "cube-control":"ingress" "ingress" C-m;

  tmux attach -t "cube-control";
}

function pods() {
  cube get po | fzf \
    --bind "ctrl-o:execute:${EDITOR:-vim} <(kubectl logs --all-containers --kubeconfig=$KUBECONFIG -n $KNS {1}) > /dev/tty" \
    --bind "ctrl-d:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS delete pod {1}" \
    --bind "ctrl-r:reload:kubectl --kubeconfig=$KUBECONFIG -n $KNS get po" \
    --preview-window up \
    --preview "kubectl --kubeconfig=$KUBECONFIG logs -n $KNS {1}" \
    --info=inline --header-lines=1 \
    --prompt "--kubeconfig=$KUBECONFIG namespace: $KNS> " \
    --header $'╱ CTRL-O (open log in editor) ╱ CTRL-D (delete) ╱ CTRL-R (reload) ╱\n'
#    --bind "enter:execute:kubectl exec -it --kubeconfig=$KUBECONFIG -n $KNS {1} -- /bin/sh > /dev/tty"
}

function services() {
  cube get services | fzf \
    --bind "ctrl-e:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS edit services/{1} -o yaml" \
    --bind "ctrl-d:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS delete services {1}" \
    --bind "ctrl-r:reload:kubectl --kubeconfig=$KUBECONFIG -n $KNS get services" \
    --preview-window up \
    --preview "kubectl --kubeconfig=$KUBECONFIG -n $KNS get services {1} -o yaml" \
    --info=inline --header-lines=1 \
    --prompt "--kubeconfig=$KUBECONFIG namespace: $KNS> " \
    --header $'╱ CTRL-E (edit) ╱ CTRL-D (delete) ╱ CTRL-R (reload) ╱\n'
}

function deployments() {
  cube get deployments | fzf \
    --bind "ctrl-e:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS edit deployment/{1} -o yaml" \
    --bind "ctrl-d:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS delete deployment {1}" \
    --bind "ctrl-r:reload:kubectl --kubeconfig=$KUBECONFIG -n $KNS get deployments" \
    --preview-window up \
    --preview "kubectl --kubeconfig=$KUBECONFIG -n $KNS get deployments {1} -o yaml" \
    --info=inline --header-lines=1 \
    --prompt "--kubeconfig=$KUBECONFIG namespace: $KNS> " \
    --header $'╱ CTRL-E (edit) ╱ CTRL-D (delete) ╱ CTRL-R (reload) ╱\n'
}

function statefulsets() {
  cube get statefulsets | fzf \
    --bind "ctrl-e:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS edit statefulset/{1} -o yaml" \
    --bind "ctrl-d:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS delete statefulset {1}" \
    --bind "ctrl-r:reload:kubectl --kubeconfig=$KUBECONFIG -n $KNS get statefulsets" \
    --preview-window up \
    --preview "kubectl --kubeconfig=$KUBECONFIG -n $KNS get statefulsets {1} -o yaml" \
    --info=inline --header-lines=1 \
    --prompt "--kubeconfig=$KUBECONFIG namespace: $KNS> " \
    --header $'╱ CTRL-E (edit) ╱ CTRL-D (delete) ╱ CTRL-R (reload) ╱\n'
}

function replicasets() {
  cube get replicasets | fzf \
    --bind "ctrl-e:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS edit replicaset/{1} -o yaml" \
    --bind "ctrl-d:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS delete replicaset {1}" \
    --bind "ctrl-r:reload:kubectl --kubeconfig=$KUBECONFIG -n $KNS get replicasets" \
    --preview-window up \
    --preview "kubectl --kubeconfig=$KUBECONFIG -n $KNS get replicasets {1} -o yaml" \
    --info=inline --header-lines=1 \
    --prompt "--kubeconfig=$KUBECONFIG namespace: $KNS> " \
    --header $'╱ CTRL-E (edit) ╱ CTRL-D (delete) ╱ CTRL-R (reload) ╱\n'
}

function configmaps() {
  cube get configmaps | fzf \
    --bind "ctrl-e:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS edit configmap/{1} -o yaml" \
    --bind "ctrl-d:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS delete configmap {1}" \
    --bind "ctrl-r:reload:kubectl --kubeconfig=$KUBECONFIG -n $KNS get configmaps" \
    --preview-window up \
    --preview "kubectl --kubeconfig=$KUBECONFIG -n $KNS get configmaps {1} -o yaml" \
    --info=inline --header-lines=1 \
    --prompt "--kubeconfig=$KUBECONFIG namespace: $KNS> " \
    --header $'╱ CTRL-E (edit) ╱ CTRL-D (delete) ╱ CTRL-R (reload) ╱\n'
}

function secrets() {
  cube get secrets | fzf \
    --bind "ctrl-e:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS edit secret/{1} -o yaml" \
    --bind "ctrl-d:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS delete secret {1}" \
    --bind "ctrl-r:reload:kubectl --kubeconfig=$KUBECONFIG -n $KNS get secrets" \
    --preview-window up \
    --preview "kubectl --kubeconfig=$KUBECONFIG -n $KNS get secrets {1} -o yaml" \
    --info=inline --header-lines=1 \
    --prompt "--kubeconfig=$KUBECONFIG namespace: $KNS> " \
    --header $'╱ CTRL-E (edit) ╱ CTRL-D (delete) ╱ CTRL-R (reload) ╱\n'
}

function ingress() {
  cube get ingress | fzf \
    --bind "ctrl-e:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS edit ingress/{1} -o yaml" \
    --bind "ctrl-d:execute:kubectl --kubeconfig=$KUBECONFIG -n $KNS delete ingress {1}" \
    --bind "ctrl-r:reload:kubectl --kubeconfig=$KUBECONFIG -n $KNS get ingress" \
    --preview-window up \
    --preview "kubectl --kubeconfig=$KUBECONFIG -n $KNS get ingress {1} -o yaml" \
    --info=inline --header-lines=1 \
    --prompt "--kubeconfig=$KUBECONFIG namespace: $KNS> " \
    --header $'╱ CTRL-E (edit) ╱ CTRL-D (delete) ╱ CTRL-R (reload) ╱\n'
}

function update_ps1() { PS1="kubectl --kubeconfig=$KUBECONFIG -n $KNS \n> " ;}

PROMPT_COMMAND=update_ps1

# tmux functions
function tss() { if [ $# -eq 0 ]; then tmux; else tmux new -s $*; fi ;}
function tas() { if [ $# -eq 0 ]; then tmux attach -t $(tmux ls | sed -n '/:/s/:.*//p' | fzf); else tmux attach -t $*; fi ;}
function tks() { tmux kill-session -t $(tmux ls | sed -n '/:/s/:.*//p' | fzf -m) ;}

# function hist() { num=$(history | grep $1 | fzf | sed -n 's/[0-9][0-9]*//p' | sed 's/^[[:space:]]*//g'); eval $num ;}
function hist() {
  if [ ! -z "$1" ]
    then num=$(history | sort -rn | grep $1 | fzf | sed -n 's/[0-9][0-9]*//p' | sed 's/^[[:space:]]*//g');
    else num=$(history | sort -rn | fzf | sed -n 's/[0-9][0-9]*//p' | sed 's/^[[:space:]]*//g');
  fi
  eval $num;
}