#!/bin/bash
# to replace first instance of *pattern*
# | sed -n 's/pattern//p'
# get everything after the first instance of the pattern
# | sed -n '/:/s/[pattern]//p'
# to remove everything after pattern
# | sed 's/[pattern].*$//'
# s/          : substitute
# .*crop=     : everything up to and including "crop="
# \([0-9.:]\) : match only numbers and '.' and ':' - I call this the backslash-bracketed expression
# \(.*\)      : match 'everything else' (probably not needed)
# /\1/        : and replace with the first backslash-bracketed expression you found

function key() { rm -rf ~/.ssh/id_ed25519 && ln -s ~/.ssh/id_ed25519.$1 ~/.ssh/id_ed25519 && rm -rf ~/.ssh/id_ed25519.pub && ln -s ~/.ssh/id_ed25519.pub.$1 ~/.ssh/id_ed25519.pub ;}
function treEnv() { tree env | grep .env | sed 's/.*├── //' |  sed 's/.*└── //' ;}

function cc() { "$@" | $CLIPBOARD ;}
function cpl() { fc -ln -1 | $CLIPBOARD ;}

# maven functions
function mist() { mvn -T 1C clean install "$@" -Dmaven.test.skip=true -DskipTests -Dmaven.javadoc.skip=true ;}
function mid() { mvn -pl "$@" -amd clean install ;}
function msv() {
  mvn versions:set -DnewVersion="$*";
  rm -rf *.versionsBackup
  for i in $(ls -d */); 
    do
      [[ -e "$i" ]] || break
      rm -rf "$i"*.versionsBackup
  done
}

# tmux functions
# function muxr() { PROJECT=~/.config/tmuxinator/paths$(pwd)/tmuxinator.yml ; if [ -f $PROJECT ]; then tmuxinator start -p $PROJECT; else smux; fi ;}
function smux() { PROJECT=$(ls ~/.config/tmuxinator/ | sed 's/[.].*$//' | fzf) ; if [ ! -z "$PROJECT" ]; then tmuxinator start $PROJECT; fi ;}
function mux() { if [ $# -eq 0 ]; then smux ; else tmuxinator start $*; fi ;}
function tss() { if [ $# -eq 0 ]; then tmux; else tmux new -s $*; fi ;}
function tas() { if [ $# -eq 0 ]; then tmux attach -t $(tmux ls | sed -n '/:/s/:.*//p' | fzf); else tmux attach -t $*; fi ;}
function tks() { tmux kill-session -t $(tmux ls | sed -n '/:/s/:.*//p' | fzf -m) ;}

function containers() {
  docker ps -a --format 'table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}' | fzf \
    --bind "ctrl-o:execute:${EDITOR:-vim} <(docker container logs {1}) > /dev/tty" \
    --bind "ctrl-s:execute:docker stop {1} > /dev/null" \
    --bind "ctrl-x:execute:docker start {1} > /dev/null" \
    --bind "ctrl-d:execute:docker stop {1} && docker rm {1} -v > /dev/null;" \
    --bind "ctrl-p:execute:docker system prune > /dev/null" \
    --bind 'ctrl-z:transform:[[ ! {fzf:prompt} =~ ALL ]] &&
              echo "change-prompt(ALL > )+reload(docker ps -a --format \"table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}\")" ||
              echo "change-prompt(ACTIVE > )+reload(docker ps --format \"table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}\")"' \
    --bind 'ctrl-r:reload:[[ ! {fzf:prompt} =~ ALL ]] &&
              docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}" ||
              docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}"' \
    --bind "enter:execute:echo docker exec -ti {2}; docker exec -ti {1} /bin/sh > /dev/tty" \
    --info=inline --layout=reverse --header-lines=1 \
    --preview-window 'up,70%,border-bottom,+{2}+3/3,~3' \
    --preview "docker container logs {1}" \
    --prompt "docker ps -a >" \
    --header $'CTRL-O (open logs in editor) | CTRL-S (stop container) | CTRL-X (start container) | CTRL-D (delete container) | CTRL-P (prune system) | CTRL-R (reload) | CTRL-Z (toggle between all or active containers) | ENTER (exec into container)\n'
}

function networks() {
  docker network ls | fzf \
    --bind "ctrl-d:execute:docker network rm {1} > /dev/null" \
    --bind "ctrl-p:execute:docker network prune -f > /dev/null" \
    --bind "ctrl-r:reload:docker network ls" \
    --info=inline --layout=reverse --header-lines=1 \
    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
    --preview 'docker network inspect -f json {1} | jq ".[].Containers"' \
    --prompt "networks >" \
    --header $'CTRL-D (delete network) | CTRL-P (prune networks) | CTRL-R (reload)\n'
}

function images() {
  docker image ls | fzf \
    --bind "ctrl-d:execute:docker image rm {3} > /dev/null;" \
    --bind "ctrl-p:execute:docker image prune -f > /dev/null" \
    --bind "ctrl-r:reload:docker image ls" \
    --info=inline --layout=reverse --header-lines=1 \
    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
    --preview "echo "Env:" && docker image inspect {1} | jq '.[].Config.Env' && echo "WorkingDir:" && docker image inspect {1} | jq '.[].Config.WorkingDir' && echo "Entrypoint:" && docker image inspect {1} | jq '.[].Config.Entrypoint'" \
    --prompt "images >" \
    --header $'CTRL-S (stop all containers using image) | CTRL-D (delete image) | CTRL-P (prune images) | CTRL-R (reload)\n'
}

function stopContainersUsingImage() { for i in $(docker container ls --all --filter=ancestor=$1 --format "{{.ID}}"); do echo "docker stop $i"; done;}

function dockerContainerStart() { dockerCommand start ;}
function dockerContainerStop() { dockerCommand stop ;}
function dockerContainerRestart() { dockerCommand restart ;}
function dockerCommand() {
  for i in $(docker ps -a | fzf -m | awk '{print $1}'); do
    echo container "$(docker ps -a | grep $i | awk '{print $2}')" is being "$*"ed
    docker "$@" "$i" 1> /dev/null;
  done
}
function dockerContainerTerminal () { docker exec -ti "$(docker ps | fzf | awk '{print $1}')" /bin/sh ;}
function dockerContainerExec () { docker exec "$(docker ps | fzf | awk '{print $1}')" $* ;}

# git functions (need to handle ??)
# diff all subdirectories
function gitDiff() {
  tmux new-session -d -s $(pwd)
  if [[ $* == "-H" ]] || [[ $* == "-h" ]];
    then 
      # Split horizonatally
      tmux split-window -h;

      # Send the 'git' command to both panes
      tmux send-keys -t $(pwd):0.0 'gitDiffStaged' C-m;
      tmux send-keys -t $(pwd):0.1 'gitDiffUnstaged' C-m;
    else
      tmux rename-window "gitDiffStaged";
      tmux send-keys -t "$(pwd)":0 'gitDiffStaged' C-m;

      tmux new-window -n gitDiffUnstaged;
      tmux send-keys -t "$(pwd)":1 'gitDiffUnstaged' C-m;
  fi
  tmux attach-session -t "$(pwd)";
}
# shellcheck disable=SC2120
function gitDiffUnstaged() {
  preview=( "git diff $@ --color=always -- {-1}" ) # array
  git diff "$@" --name-only | fzf \
      -m --ansi \
      --bind "ctrl-o:execute:${EDITOR:-vim} {1} > /dev/tty" \
      --bind "ctrl-s:execute:git add {1} > /dev/null" \
      --bind "ctrl-r:reload:git diff --name-only" \
      --bind "ctrl-e:execute:git checkout {1} > /dev/null" \
      --preview $preview \
      --prompt "untracked changes >" \
      --header $'CTRL-O (open in editor) | CTRL-S (stage) | CTRL-E (revert changes) | CTRL-R (reload)\n'
}
function gitDiffStaged() {
  preview=( "git diff --cached $@ --color=always -- {-1}" )
  git diff --cached "$@" --name-only | fzf \
    -m --ansi \
    --bind "ctrl-o:execute:${EDITOR:-vim} {1} > /dev/tty" \
    --bind "ctrl-s:execute:git restore --staged {1} > /dev/null" \
    --bind "ctrl-r:reload:git diff --cached --name-only" \
    --bind "ctrl-e:execute:git stash push {1}" \
    --preview $preview \
    --prompt "staged changes >" \
    --header $'CTRL-O (open in editor) | CTRL-S (unstage) | CTRL-E (stash) | CTRL-R (reload)\n'
}
function gitFileRevert() {
  FILE=$(git status --porcelain | sed 's/M //g;s/A //g;s/R //g;s/C //g;s/D //g' | fzf -m | sed 's/^[[:space:]]*//g')
  if [ ! -z "$FILE" ]
    then for i in $(printf %b "$FILE"); do git checkout "$i"; done
    else echo 'no files selected, no changes made'
  fi
}
function gitFileUnstage() {
  FILE=$(git status --porcelain | sed 's/M //g;s/A //g;s/R //g;s/C //g;s/D //g' | fzf -m | sed 's/^[[:space:]]*//g')
  if [ ! -z "$FILE" ]
    then for i in $(printf %b $FILE); do git restore --staged $i; done
    else echo 'no files selected, no changes made'
  fi
}
function gitStashApply() { git stash apply $(git stash list | grep "$1" | fzf | sed -n '/:/s/stash@{//p' | sed 's/[}].*$//') ;}
function gitStashDelete() {
  STASH=$(git stash list | grep "$1" | fzf | sed -n '/:/s/stash@{//p' | sed 's/[}].*$//')
  if [ ! -z "$STASH" ];
    then git stash drop "$STASH";
    else echo 'no stashes select or dropped';
  fi
  # STASHES=$(git stash list | grep "$1" | fzf -m | sed -n '/:/s/stash@{//p' | sed 's/[}].*$//')
  # echo "$STASHES"
  # if [ ! -z "$STASHES" ];
  #   then for i in $(printf %b "$STASHES"); do git stash drop "$i"; done;
  #   else echo 'no stashes select or dropped';
  # fi
}
#function gsa() { git stash list | grep "$1" ; echo git stash apply ; read stashNum ; git stash apply $stashNum ;}
function gitAdd() { gitDiffUnstaged ;}
function gitAddStash() {
  ISET="false"
  while getopts 'i' flag; do
    case "${flag}" in
      i) ISET="true" ;;
      *) print_usage
        exit 1 ;;
    esac
  done
  if [[ $ISET == "true" ]];
    then gitAdd ; git stash save -S "${@:2}" ;
    else git add . ; git stash save -S $* ;
  fi
}
function gitAddCommit() { 
  ISET="false"
  while getopts 'i' flag; do
    case "${flag}" in
      i) ISET="true" ;;
      *) print_usage
        exit 1 ;;
    esac
  done
  if [[ $ISET == "true" ]];
    then gitAdd ; COMMIT_MESSAGE="${@:2}" ; git commit -m "$(gitBranch): $COMMIT_MESSAGE" ;
    else git add . ; git commit -m "$(gitBranch): $*" ;
  fi
  }
function gitAddCommitPush() {
  BRANCH=$(gitBranch);
  if [[ "${BRANCH}" == *"master"* ]] || [[ "${BRANCH}" == *"main"* ]] || [[ "${BRANCH}" == *"release"* ]] || [[ "${BRANCH}" == *"develop"* ]];
    then echo "are you sure you want to push to ${BRANCH}? y/n" ; read answer ;
      if [[ "${answer}" == "Y" ]] || [[ "${answer}" == "y" ]];
        then gitAddCommit $* ; git push ;
        else echo "commit/push aborted.";
      fi
    else gitAddCommit $* ; git push --set-upstream origin ${BRANCH} ;
  fi
}
function gitHead() { git branch -r | grep HEAD | sed -n 's/  origin\/HEAD -> origin\///p' ;}
function gitPullOriginHead() { git pull origin $(gitHead) ;}
function gitSwitchHead() { git switch "$(gitHead)" && git pull ;}
function gitSwitchBranch () {
  git fetch --prune
  git pull
  if [[ $(git status --porcelain) ]];
    then
      choice=$(printf "commit\nstash\nother" | fzf)
      if [ "$choice" = "stash" ];
        then echo "stash message: " ; read -r message ; gitAddStash "$message"
      fi
      if [ "$choice" = "commit" ];
        then echo "commit message: " ; read -r message ; gitAddCommit "$message"
      fi
      if [ "$choice" = "other" ];
        then return
      fi
      gitSwitchBranch
  else
    if [ -z "$1" ]
      then git switch "$(git branch -r | sed "s|origin/||" | sed 's/ //g' | fzf)"
      else git switch "$1"
    fi
    git pull
  fi
}
# function gitSwitchBranch() {
# 	git switch "$(git remote show origin | grep HEAD | sed -n '/:/s/ HEAD branch: //p')"
# }
function gitBranch() { git branch --show-current; }
function gitDeleteBranch() { git branch -D "$@"; }
function gitCopyBranch() { git branch --show-current | $CLIPBOARD; }
function gitCreateBranch() { git checkout -b "$@"; }
function rclone() { (cd ~/repos && git clone "$1" && idea "$(pwd)/$(ls | fzf)") ;}
function tclone() { (cd ~/temp && git clone "$1" && idea "$(pwd)/$(ls | fzf)") ;}

# editor functions
function ij() { (cd ~/repos && idea "$(pwd)$(ls | fzf)") ; }
function io() { (cd ~/temp && idea "$(pwd)$(ls | fzf)") ; }

# random functions
function mkd() { mkdir "$*" && cd "$*" ;}
function functions() { cat ~/.zsh_functions ~/.zsh_local/.* | grep function ;}
function aliases() { grep alias ~/.zsh_aliases ;}
function falias() { cat ~/.zsh_functions ~/.zsh_aliases | grep 'function\|alias' ;}
# improve this to filter out previous usages of hist
function hist() {
  if [ ! -z "$1" ]
    then num=$(history | sort -rn | grep $1 | fzf | sed -n 's/[0-9][0-9]*//p' | sed 's/^[[:space:]]*//g'); 
    else num=$(history | sort -rn | fzf | sed -n 's/[0-9][0-9]*//p' | sed 's/^[[:space:]]*//g'); 
  fi
  eval $num;
}

# environment management functions
function j8() { updateEnvFile 8 ;}
function j11() { updateEnvFile 11 ;}
function j17() { updateEnvFile 17 ;}
function j21() { updateEnvFile 21 ;}
function backup() { (cd ~/Documents/cli && gitAddCommitPush $*) ;}

# searching functions
function fs() { FILENAME=$(preview); if [ ! -z "$FILENAME" ] ; then micro $FILENAME ; fi ;}
function ws() { FILENAME=$(rgf $1 $2) ; if [ ! -z "$FILENAME" ] ; then micro $FILENAME ; fi ;}
function rgf() { rg --hidden $1 $2 -l | fzf --preview 'bat --style=default --color=always {}' ;}
function preview() { find . -type f -not -path '*/\.git/*' | fzf --preview 'bat --style=default --color=always {}' ;}
